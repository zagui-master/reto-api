name: CI-CD-Pipeline

on:
  push:
    branches: [main]

jobs:
  # -------- CI Stage --------
  ci:
    name: CI - Unit Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout código
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Instalar dependencias
        run: npm install

      - name: Ejecutar pruebas unitarias con Jest
        run: npm run test -- --ci --coverage

  # -------- Build Stage --------
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: ci

    steps:
      - name: Checkout código
        uses: actions/checkout@v3

      - name: Construir imagen Docker
        run: |
          docker build -t mi-crud-app-reto:latest .

      - name: Login DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Etiquetar y subir imagen
        run: |
          docker tag mi-crud-app-reto:latest ${{ secrets.DOCKERHUB_USERNAME }}/mi-crud-app-reto:latest
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/mi-crud-app-reto:latest

  # -------- Deploy Stage --------
  deploy:
    name: Deploy to Kubernetes
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Configurar kubeconfig
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBECONFIG_CONTENT }}" > ~/.kube/config
          
      - name: Checkout código
        uses: actions/checkout@v3

      - name: Crear namespace si no existe
        run: |
          kubectl get namespace mi-aplicacion || kubectl create namespace mi-aplicacion

      - name: Aplicar manifiestos de Kubernetes
        run: |
          kubectl apply -f k8s/deploy.yaml
          kubectl apply -f k8s/server.yaml

      - name: Esperar a que el pod esté listo
        run: |
          kubectl rollout status deployment/mi-crud-app-reto -n mi-aplicacion
          kubectl get pods -n mi-aplicacion

  # -------- E2E Test Stage --------
  automated-tests:
    name: E2E Tests - Karate
    runs-on: ubuntu-latest
    needs: deploy

    steps:
      - name: Checkout repo de pruebas Karate
        uses: actions/checkout@v3
        with:
          repository: zagui-master/reto-karate-test
          token: ${{ secrets.GITHUB_TOKEN }}
          path: tests-karate

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Ejecutar pruebas Karate
        run: |
          cd tests-karate
          mvn clean test -Dbase.url=http://localhost:30080
